{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","type","name","className","Recipes","console","log","recipes","react","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","URL","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","Router","process","basename","react_router","exact","path","render","routerProps","src_App_0","Recipe_Recipe","Boolean","window","hostname","match","ReactDOM","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07290e34.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Form(props) {\n  return (\n    <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n      <input type='text' name='recipeName' className='form__input' />\n      <button className='form__button'>Search</button>\n    </form>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Recipes(props) {\n  console.log(\"Redcipes props\");\n  console.log(\"Redcipes props\", props);\n  return (\n    <div className='container'>\n      <div className='row'>\n        {props.recipes === null ? (\n          <div>\n            <h3>Loading...</h3>\n            {console.log(\"loading\")}\n          </div>\n        ) : (\n          <Fragment>\n            {props.recipes.map(recipe => (\n              <div\n                className='col-md-4'\n                key={recipe.recipe_id}\n                style={{ marginBottom: \"2rem\" }}\n              >\n                <div className='recipes__box'>\n                  <img\n                    className='recipes__box-img'\n                    src={recipe.image_url}\n                    alt={recipe.title}\n                  />\n                  <div className='recipe__text'>\n                    <h5 className='recipes__title'>\n                      {recipe.title.length < 20\n                        ? `${recipe.title}`\n                        : `${recipe.title.substring(0, 24)}...`}\n                    </h5>\n                    <p className='recipes__subtitle'>\n                      Publisher: <span>{recipe.publisher}</span>\n                    </p>\n                  </div>\n                  <button className='recipe_buttons'>\n                    {/* <Link to={`/recipe/${recipe.recipe_id}`}>View Recipe</Link> */}\n                    <Link\n                      to={{\n                        pathname: `/recipe/${recipe.recipe_id}`,\n                        state: { recipe: recipe.title }\n                      }}\n                    >\n                      {\" \"}\n                      View Recipe\n                    </Link>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Recipes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nconst API_KEY = \"8fd715836ce66fb44473ee47c22db392\";\n// const API_KEY = \"G8fd715836ce66fb44473ee47c22db392\";\n// const URL = `https://www.food2fork.com/api/search?key=${API_KEY}`;\nconst URL = `http://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}`;\n\nclass App extends Component {\n  state = {\n    recipes: []\n  };\n\n  //First\n  getRecipe = async e => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value;\n    // console.log(\"Working from getRecipe\", recipeName);\n    const api_call = await fetch(`${URL}&q=${recipeName}&count=100`);\n    const data = await api_call.json();\n    console.log(\"data.recipes\");\n    console.log(data.recipes);\n    this.setState({\n      recipes: data.recipes\n    });\n  };\n\n  //Third\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({\n      recipes\n    });\n  };\n\n  //Second\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst API_KEY = \"8fd715836ce66fb44473ee47c22db392\";\nconst URL = `http://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}`;\n\nexport default class Recipe extends Component {\n  state = {\n    activeRecipe: []\n  };\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(`${URL}&q=${title}`);\n    const res = await req.json();\n    console.log(res.recipes[0]);\n    this.setState({\n      activeRecipe: res.recipes[0]\n    });\n  };\n\n  render() {\n    console.log(this.props);\n    const recipe = this.state.activeRecipe;\n    // // console.log(this.props)\n    return (\n      <div className='container'>\n        {recipe.length !== 0 && (\n          <div className='active-recipe'>\n            <img\n              className='active-recipe__img'\n              src={recipe.image_url}\n              alt={recipe.title}\n            />\n            <h3 className='active-recipe__title'>{recipe.title}</h3>\n            <h4 className='active-recipe__publisher'>\n              Publisher: <span>{recipe.publisher}</span>\n            </h4>\n            <p className='active-recipe__website'>\n              Website:\n              <span>\n                <a href={recipe.publisher_url}>{recipe.publisher_url}</a>\n              </span>\n            </p>\n            <button className='active-recipe__button'>\n              <Link to={`/`}>Go Home</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport App from \"../App.js\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => {\n  console.log(process.env.PUBLIC_URL);\n  console.log(\"brwseroter\", `${process.env.PUBLIC_URL}/`);\n  console.log(`${process.env.PUBLIC_URL}/recipe/:id`);\n  return (\n    <BrowserRouter basename={`${process.env.PUBLIC_URL}`}>\n      <Switch>\n        {/* <Route exact path={`/`} component={App} /> */}\n        {/* <Route exact path={`${process.env.PUBLIC_URL}/`} component={App} /> */}\n        <Route\n          exact\n          path={`/`}\n          render={routerProps => <App routerProps={routerProps} />}\n        />\n\n        <Route\n          exact\n          path={`/recipe/:id`}\n          render={routerProps => <Recipe routerProps={routerProps} />}\n        />\n\n        {/* <Route\n          path={`${process.env.PUBLIC_URL}/recipe/:id`}\n          component={Recipe}\n        /> */}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}